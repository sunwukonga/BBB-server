#!/usr/bin/env bash

# Taken from https://willhaley.com/blog/generate-jwt-with-bash/
toUpper() {
  declare input=${1:-$(</dev/stdin)}
  printf '%s' "${input}" | tr a-z A-Z
}

uppercaseInput=$(echo $1 | toUpper)

if [ "$uppercaseInput" == "ADMIN" ]; then
  secret=$JWT_ADMIN_SECRET_KEY
else
  secret=$JWT_SECRET_KEY
fi

# Static header fields.
header='{
  "alg": "HS256",
  "typ": "JWT"
}'

# Use jq to set the dynamic `iat` and `exp`
# fields on the header using the current time.
# `iat` is set to now, and `exp` is now + 1 second.
# Use jq to set the dynamic `iat` and `exp`
# fields on the header using the current time.
# `iat` is set to now, and `exp` is now + 1 second.
# header=$(
# 	echo "${header}" | jq --arg time_str "$(date +%s)" \
# 	'
# 	($time_str | tonumber) as $time_num
# 	| .iat=$time_num
# 	| .exp=($time_num + 1)
# 	'
# )

payload='{
  "userid": ""
, "roles": [
    "BARGAINER"
  ]
, "countryCode": "SG"
}'

base64_encode()
{
  declare input=${1:-$(</dev/stdin)}
  printf '%s' "${input}" | openssl enc -base64 -A | sed s/\+/-/g | sed -E 's/\//_/g' | sed -E s/=+$//
}
#  | sed s/\+/-/ | sed -E s/=+$//
json() {
  declare input=${1:-$(</dev/stdin)}
  printf '%s' "${input}" | jq -c .
}

hmacsha256_sign()
{
  declare input=${1:-$(</dev/stdin)}
  printf '%s' "${input}" | openssl dgst -binary -sha256 -hmac "${secret}"
}

header_base64=$(echo "${header}" | json | base64_encode)
payload_base64=$(echo "${payload}" | json | base64_encode)

header_payload=$(echo "${header_base64}.${payload_base64}")
signature=$(echo "${header_payload}" | hmacsha256_sign | base64_encode)

echo "${header_payload}.${signature}"
